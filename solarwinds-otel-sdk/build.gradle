plugins {
  id("java")
  id("maven-publish")
  id("com.github.johnrengelman.shadow")
  id("signing")
}

apply from: "$rootDir/gradle/shadow.gradle"
project.archivesBaseName = 'solarwinds-otel-sdk'
def relocatePackages = ext.relocatePackages

dependencies {
  compileOnly project(":custom")
  compileOnly project(":bootstrap")
  compileOnly("io.opentelemetry:opentelemetry-sdk:${versions.opentelemetry}")

  compileOnly("io.opentelemetry:opentelemetry-api:${versions.opentelemetry}")
  compileOnly("io.opentelemetry:opentelemetry-context:${versions.opentelemetry}")

  compileOnly("io.opentelemetry.javaagent:opentelemetry-javaagent-bootstrap:${versions.opentelemetryJavaagentAlpha}")
  compileOnly "com.appoptics.agent.java:core:${versions.appopticsCore}"
  compileOnly "com.appoptics.agent.java:metrics:${versions.appopticsMetrics}"

  testImplementation project(path: ":bootstrap")
  testImplementation 'org.mockito:mockito-core:5.3.0'
  testImplementation 'org.mockito:mockito-junit-jupiter:5.3.0'

  testImplementation 'org.mockito:mockito-inline:5.2.0'
  testImplementation("org.junit.jupiter:junit-jupiter-api:5.9.2")
  testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.9.2")
}

tasks.register('sourcesJar', Jar) {
  from('.') {
    include 'SOURCES_DOC_README'
  }
  archiveClassifier.set("sources")
}

tasks.register('javadocJar', Jar) {
  from('.') {
    include 'SOURCES_DOC_README'
  }
  archiveClassifier.set("javadoc")
}

shadowJar{
  archiveClassifier.set(null)
  relocatePackages(it)
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      pom {
        name = "${archivesBaseName}"
        description = "${archivesBaseName}"
        url = "www.solarwinds.com"
        scm {
          url = 'https://www.solarwinds.com'
        }
        developers {
          developer {
            id = 'APM'
            name = 'The APM Agent team'
          }
        }
        licenses {
          license {
            name = 'Librato Open License'
          }
        }
        groupId = 'io.github.appoptics'
        artifactId = "${archivesBaseName}"
        version = "${versions.agent}"
        from components.java
        artifact sourcesJar
        artifact javadocJar
      }
    }
    publishToMavenLocal
  }
  repositories {
    maven {
      name = "OSSRH"
      url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
      credentials {
        username = System.getenv("SONATYPE_USERNAME")
        password = System.getenv("SONATYPE_TOKEN")
      }
    }
    maven {
      name = "GitHubPackages"
      url = "https://maven.pkg.github.com/solarwindscloud/solarwinds-apm-java"
      credentials {
        username = System.getenv("GITHUB_USERNAME")
        password = System.getenv("GITHUB_TOKEN")
      }
    }
  }
}

signing {
  setRequired {
    gradle.taskGraph.allTasks.any { (it.getClass() == PublishToMavenRepository.class) }
  }
  def signingKey = System.getenv("GPG_PRIVATE_KEY")
  def signingPassword = System.getenv("GPG_PRIVATE_KEY_PASSPHRASE")
  useInMemoryPgpKeys(signingKey, signingPassword)
  sign publishing.publications.mavenJava
}


test {
  useJUnitPlatform()
  testLogging {
    events "passed", "skipped", "failed"
  }
}