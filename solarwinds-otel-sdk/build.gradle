/*
 * Â© SolarWinds Worldwide, LLC. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
  id("signing")
  id("maven-publish")
  id("solarwinds.java-conventions")
  id("solarwinds.shadow-conventions")
}

project.archivesBaseName = 'solarwinds-otel-sdk'

dependencies {
  compileOnly project(":bootstrap")
  compileOnly("io.opentelemetry:opentelemetry-sdk")

  compileOnly("io.opentelemetry:opentelemetry-api")
  compileOnly("io.opentelemetry:opentelemetry-context")
  compileOnly("io.opentelemetry.javaagent:opentelemetry-javaagent-bootstrap")
}

tasks.register('sourcesJar', Jar) {
  from sourceSets.main.allJava
  archiveClassifier.set("sources")
}

tasks.register('javadocJar', Jar) {
  from generateDoc
  archiveClassifier.set("javadoc")
}

tasks.register('generateDoc', Javadoc) {
  source = sourceSets.main.allJava
  classpath = sourceSets.main.compileClasspath
}

shadowJar{
  archiveClassifier.set(null)
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      pom {
        name = "${archivesBaseName}"
        description = "${archivesBaseName}"
        url = "www.solarwinds.com"
        scm {
          url = 'https://www.solarwinds.com'
        }
        developers {
          developer {
            id = 'APM'
            name = 'The APM Library Team'
          }
        }
        licenses {
          license {
            name = 'Apache License, Version 2.0'
          }
        }

        groupId = 'io.github.appoptics'
        artifactId = "${archivesBaseName}"
        
        def snapshotVersion = System.getenv("AGENT_VERSION")
        version = Boolean.parseBoolean(System.getenv("SNAPSHOT_BUILD")) ? "${snapshotVersion}-SNAPSHOT" : "${swoAgentVersion}"

        from components.java
        artifact sourcesJar
        artifact javadocJar
      }
    }
  }
}

signing {
  setRequired {
    gradle.taskGraph.allTasks.any { (it.getClass() == PublishToMavenRepository.class) }
  }
  def signingKey = System.getenv("GPG_PRIVATE_KEY")
  def signingPassword = System.getenv("GPG_PRIVATE_KEY_PASSPHRASE")
  useInMemoryPgpKeys(signingKey, signingPassword)
  sign publishing.publications.mavenJava
}

test {
  useJUnitPlatform()
  testLogging {
    events "passed", "skipped", "failed"
  }
}

compileJava {
  options.release.set(8)
}