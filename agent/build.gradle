import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
  id 'com.github.johnrengelman.shadow'
  id 'maven-publish'
  id 'signing'
}

apply from: "$rootDir/gradle/shadow.gradle"

project.archivesBaseName = 'solarwinds-apm-agent'

def relocatePackages = ext.relocatePackages

configurations {
  // this configuration collects libs that will be placed in the bootstrap classloader
  bootstrapLibs {
    canBeResolved = true
    canBeConsumed = false
  }
  // this configuration collects libs that will be placed in the agent classloader, isolated from the instrumented application code
  javaagentLibs {
    canBeResolved = true
    canBeConsumed = false
  }
  // this configuration stores the upstream agent dep that's extended by this project
  upstreamAgent {
    canBeResolved = true
    canBeConsumed = false
  }
}

dependencies {
  javaagentLibs project(path: ":custom")
  javaagentLibs project(path: ":instrumentation")

  bootstrapLibs project(path: ":bootstrap")
  bootstrapLibs "com.appoptics.agent.java:core:${versions.appopticsCore}"
  bootstrapLibs "com.appoptics.agent.java:metrics:${versions.appopticsMetrics}"

  upstreamAgent "io.opentelemetry.javaagent:opentelemetry-javaagent:${versions.opentelemetryJavaagent}"
}

CopySpec isolateClasses(Iterable<File> jars) {
  return copySpec {
    jars.forEach {
      from(zipTree(it)) {
        into("inst")
        rename("^(.*)\\.class\$", "\$1.classdata")
      }
    }
  }
}

tasks {
  // building the final javaagent jar is done in 3 steps:

  // 1. all distro specific javaagent libs are relocated
  tasks.register('relocateJavaagentLibs', ShadowJar) {
    configurations = [project.configurations.javaagentLibs]

    duplicatesStrategy = DuplicatesStrategy.FAIL

    archiveFileName.set("javaagentLibs-relocated.jar")

    mergeServiceFiles()
    exclude("**/module-info.class")
    relocatePackages(it)

    // exclude known bootstrap dependencies - they can't appear in the inst/ directory
    dependencies {
      exclude("org.slf4j:slf4j-api")
      exclude("io.opentelemetry:opentelemetry-api")
      exclude("io.opentelemetry:opentelemetry-api-logs")
      exclude("io.opentelemetry:opentelemetry-context")
      exclude("io.opentelemetry:opentelemetry-semconv")
    }
  }

  // 2. the distro javaagent libs are then isolated - moved to the inst/ directory
  // having a separate task for isolating javaagent libs is required to avoid duplicates with the upstream javaagent
  // duplicatesStrategy in shadowJar won't be applied when adding files with with(CopySpec) because each CopySpec has
  // its own duplicatesStrategy
  tasks.register('isolateJavaagentLibs', Copy) {
    dependsOn(tasks.relocateJavaagentLibs)
    with isolateClasses(tasks.relocateJavaagentLibs.outputs.files)

    into("$buildDir/isolated/javaagentLibs")
  }


  // 3. the relocated and isolated javaagent libs are merged together with the bootstrap libs (which undergo relocation
  // in this task) and the upstream javaagent jar; duplicates are removed
  shadowJar {
    configurations = [project.configurations.bootstrapLibs, project.configurations.upstreamAgent]

    dependsOn(tasks.isolateJavaagentLibs)
    from(tasks.isolateJavaagentLibs.outputs)

    archiveClassifier.set(null)

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    mergeServiceFiles {
      include("inst/META-INF/services/*")
    }
    exclude("**/module-info.class")
    exclude("inst/com/appoptics/opentelemetry/core/**")
    relocatePackages(it)

    manifest {
      attributes.put("Main-Class", "io.opentelemetry.javaagent.OpenTelemetryAgent")
      attributes.put("Agent-Class", "io.opentelemetry.javaagent.OpenTelemetryAgent")
      attributes.put("Premain-Class", "io.opentelemetry.javaagent.OpenTelemetryAgent")
      attributes.put("Can-Redefine-Classes", "true")
      attributes.put("Can-Retransform-Classes", "true")
      attributes.put("Implementation-Vendor", "SolarWinds Inc.")
      attributes.put("Implementation-Version", "${versions.agent}")
    }
  }

  assemble {
    dependsOn(shadowJar)
  }
}

tasks.register("lambda-layer", Zip) {
  archiveFileName.set("layer.zip")
  destinationDirectory.set(file("$buildDir/lambda-layer"))

  from("$buildDir/libs") {
    include("solarwinds-apm-agent.jar")
  }
  from("lambda")
}

tasks.register('sourcesJar', Jar) {
  from('.') {
    include 'SOURCES_DOC_README'
  }
  archiveClassifier.set("sources")
}

tasks.register('javadocJar', Jar) {
  from('.') {
    include 'SOURCES_DOC_README'
  }
  archiveClassifier.set("javadoc")
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      pom {
        name = "${archivesBaseName}"
        description = "${archivesBaseName}"
        url = "www.solarwinds.com"
        scm {
          url = 'https://www.solarwinds.com'
        }
        developers {
          developer {
            id = 'APM'
            name = 'The APM Agent team'
          }
        }
        licenses {
          license {
            name = 'Librato Open License'
          }
        }
        groupId = 'io.github.appoptics'
        artifactId = "${archivesBaseName}"
        version = "${versions.agent}"
        from components.java
        artifact sourcesJar
        artifact javadocJar
      }
    }

    publishToMavenLocal
  }
  repositories {
//    -- uncomment the lines below to publish the agent artifact to the Maven central --
//    maven {
//      name = "OSSRH"
//      url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
//      credentials {
//        username = System.getenv("SONATYPE_USERNAME")
//        password = System.getenv("SONATYPE_TOKEN")
//      }
//    }
    maven {
      name = "GitHubPackages"
      url = "https://maven.pkg.github.com/solarwinds-cloud/maven-releases"
      credentials {
        username = System.getenv("GITHUB_USERNAME")
        password = System.getenv("GITHUB_TOKEN")
      }
    }
  }
}

signing {
  setRequired {
    gradle.taskGraph.allTasks.any { (it.getClass() == PublishToMavenRepository.class) }
  }
  def signingKey = System.getenv("GPG_PRIVATE_KEY")
  def signingPassword = System.getenv("GPG_PRIVATE_KEY_PASSPHRASE")
  useInMemoryPgpKeys(signingKey, signingPassword)
  sign publishing.publications.mavenJava
}
