/*
 * Â© SolarWinds Worldwide, LLC. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
  id 'maven-publish'
  id 'signing'
  id("solarwinds.shadow-conventions")
}

project.archivesBaseName = 'solarwinds-apm-agent'

configurations {
  // this configuration collects libs that will be placed in the bootstrap classloader
  bootstrapLibs {
    canBeResolved = true
    canBeConsumed = false
  }
  // this configuration collects libs that will be placed in the agent classloader, isolated from the instrumented application code
  javaagentLibs {
    canBeResolved = true
    canBeConsumed = false
  }
  // this configuration stores the upstream agent dep that's extended by this project
  upstreamAgent {
    canBeResolved = true
    canBeConsumed = false
  }
}

dependencies {
  javaagentLibs project(path: ":custom")
  javaagentLibs project(path: ":custom:shared")
  javaagentLibs project(path: ":instrumentation")

  bootstrapLibs project(path: ":bootstrap")
  bootstrapLibs "com.solarwinds.joboe:core:${versions.joboe}"
  bootstrapLibs "com.solarwinds.joboe:metrics:${versions.joboe}"

  upstreamAgent "io.opentelemetry.javaagent:opentelemetry-javaagent:${versions.opentelemetryJavaagent}"
}

CopySpec isolateClasses(Iterable<File> jars) {
  return copySpec {
    jars.forEach {
      from(zipTree(it)) {
        into("inst")
        rename("^(.*)\\.class\$", "\$1.classdata")
      }
    }
  }
}

tasks {
  // building the final javaagent jar is done in 3 steps:

  // 1. all distro specific javaagent libs are relocated
  tasks.register('relocateJavaagentLibs', ShadowJar) {
    configurations = [project.configurations.javaagentLibs]

    duplicatesStrategy = DuplicatesStrategy.FAIL

    archiveFileName.set("javaagentLibs-relocated.jar")

    mergeServiceFiles()
    exclude("**/module-info.class")

    // exclude known bootstrap dependencies - they can't appear in the inst/ directory
    dependencies {
      exclude("org.slf4j:slf4j-api")
      exclude("io.opentelemetry:opentelemetry-api")
      exclude("io.opentelemetry:opentelemetry-api-logs")
      exclude("io.opentelemetry:opentelemetry-context")
      exclude("io.opentelemetry:opentelemetry-semconv")
    }
  }

  // 2. the distro javaagent libs are then isolated - moved to the inst/ directory
  // having a separate task for isolating javaagent libs is required to avoid duplicates with the upstream javaagent
  // duplicatesStrategy in shadowJar won't be applied when adding files with with(CopySpec) because each CopySpec has
  // its own duplicatesStrategy
  tasks.register('isolateJavaagentLibs', Copy) {
    dependsOn(tasks.relocateJavaagentLibs)
    with isolateClasses(tasks.relocateJavaagentLibs.outputs.files)

    into("$buildDir/isolated/javaagentLibs")
  }


  // 3. the relocated and isolated javaagent libs are merged together with the bootstrap libs (which undergo relocation
  // in this task) and the upstream javaagent jar; duplicates are removed
  shadowJar {
    configurations = [project.configurations.bootstrapLibs, project.configurations.upstreamAgent]

    dependsOn(tasks.isolateJavaagentLibs)
    from(tasks.isolateJavaagentLibs.outputs)

    archiveClassifier.set(null)

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    mergeServiceFiles {
      include("inst/META-INF/services/*")
    }
    exclude("**/module-info.class")
    exclude("inst/com/solarwinds/opentelemetry/core/**")
    exclude("com/solarwinds/joboe/shaded/google/errorprone/annotations/**")

    manifest {
      attributes.put("Main-Class", "io.opentelemetry.javaagent.OpenTelemetryAgent")
      attributes.put("Agent-Class", "io.opentelemetry.javaagent.OpenTelemetryAgent")
      attributes.put("Premain-Class", "io.opentelemetry.javaagent.OpenTelemetryAgent")
      attributes.put("Can-Redefine-Classes", "true")
      attributes.put("Can-Retransform-Classes", "true")
      attributes.put("Implementation-Vendor", "SolarWinds Inc.")
      attributes.put("Implementation-Version", "${versions.agent}")
    }
  }

  assemble {
    dependsOn(shadowJar)
  }
}

tasks.register('sourcesJar', Jar) {
  from('.') {
    include 'SOURCES_DOC_README'
  }
  archiveClassifier.set("sources")
}

tasks.register('javadocJar', Jar) {
  from('.') {
    include 'SOURCES_DOC_README'
  }
  archiveClassifier.set("javadoc")
}
