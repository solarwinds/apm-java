plugins {
  id("com.github.johnrengelman.shadow") version "7.0.0"
  id 'maven-publish'
}

apply from: "$rootDir/gradle/shadow.gradle"

project.archivesBaseName = 'solarwinds-apm-agent'

def relocatePackages = ext.relocatePackages

configurations {
  customShadow
}

dependencies {
  customShadow project(path: ":custom", configuration: "shadow")
  customShadow project(path: ":instrumentation", configuration: "shadow")
  implementation project(path: ":core-bootstrap")
  implementation project(path: ":solarwinds-otel-sdk")
  implementation "io.opentelemetry.javaagent:opentelemetry-javaagent:${versions.opentelemetryJavaagent}"
  implementation "com.appoptics.agent.java:core:${versions.appopticsCore}"
  implementation "com.appoptics.agent.java:metrics:${versions.appopticsMetrics}"
}

CopySpec isolateSpec() {
  return copySpec {
    configurations.customShadow.files.each {
      from(zipTree(it)) {
        into("inst")
        rename("(^.*)\\.class\$", "\$1.classdata")
      }
    }
  }
}

shadowJar {
  archiveClassifier.set(null)
}

tasks {
  shadowJar {
    dependsOn ':custom:shadowJar'
    dependsOn ':instrumentation:shadowJar'
    with isolateSpec()

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    mergeServiceFiles {
      include("inst/META-INF/services/*")
    }
    exclude("**/module-info.class")

    relocatePackages(it)

    manifest {
      attributes.put("Main-Class", "io.opentelemetry.javaagent.OpenTelemetryAgent")
      attributes.put("Agent-Class", "io.opentelemetry.javaagent.OpenTelemetryAgent")
      attributes.put("Premain-Class", "io.opentelemetry.javaagent.OpenTelemetryAgent")
      attributes.put("Can-Redefine-Classes", "true")
      attributes.put("Can-Retransform-Classes", "true")
      attributes.put("Implementation-Vendor", "SolarWinds Inc.")
      attributes.put("Implementation-Version", "${versions.agent}")
    }
  }

  assemble {
    dependsOn(shadowJar)
  }
}

publishing {
  publications {
    maven(MavenPublication) {
      groupId = 'com.solarwinds.agent'
      artifactId = "${archivesBaseName}"
      version = "${versions.agent}"
      from components.java
    }
  }
  repositories {
    maven {
      name = "OSSRH"
      url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
      credentials {
        username = System.getenv("MAVEN_USERNAME")
        password = System.getenv("MAVEN_PASSWORD")
      }
    }
    maven {
      name = "GitHubPackages"
      url = "https://maven.pkg.github.com/appoptics/solarwinds-apm-java"
      credentials {
        username = System.getenv("GITHUB_ACTOR")
        password = System.getenv("GITHUB_TOKEN")
      }
    }
  }
}
