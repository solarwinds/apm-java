# sdk-config.yaml is a typical starting point for configuring the SDK, including exporting to
# localhost via OTLP.

# NOTE: With the exception of env var substitution syntax (i.e. ${MY_ENV}), SDKs ignore
# environment variables when interpreting config files. This including ignoring all env
# vars defined in https://opentelemetry.io/docs/specs/otel/configuration/sdk-environment-variables/.

# The file format version.
file_format: "0.3"

# Configure if the SDK is disabled or not. This is not required to be provided to ensure the SDK isn't disabled, the default value when this is not provided is for the SDK to be enabled.
disabled: false

# Configure resource for all signals.
resource:
  # Configure resource attributes. Entries have higher priority than entries from .resource.attributes_list.
  # Entries must contain .name nand .value, and may optionally include .type, which defaults ot "string" if not set. The value must match the type. Values for .type include: string, bool, int, double, string_array, bool_array, int_array, double_array.
  attributes:
    - name: service.name
      value: java-apm-smoke-test

# Configure general attribute limits. See also tracer_provider.limits, logger_provider.limits.
attribute_limits:
  # Configure max attribute value size.
  attribute_value_length_limit:
  # Configure max attribute count.
  attribute_count_limit: 128

# Configure text map context propagators.
propagator:
  # Configure the set of propagators to include in the composite text map propagator.
  composite: [ tracecontext, baggage, swo/contextPropagator ]

# Configure tracer provider.
tracer_provider:
  # Configure span processors.
  processors:
    - # Configure a batch span processor.
      simple:
        # Configure exporter.
        exporter:
          # Configure exporter to be OTLP.
          otlp:
            # Configure protocol.
            protocol: grpc
            # Configure endpoint.
            endpoint: https://otel.collector.na-01.st-ssp.solarwinds.com
            # Configure compression.
            compression: gzip
            # Configure max time (in milliseconds) to wait for each export.
            timeout: 10000
            # Configure headers. Entries have higher priority than entries from .headers_list.
            headers_list: ${OTEL_EXPORTER_OTLP_HEADERS}
    - swo/inboundMetricSpanProcessor:
    - swo/profilingSpanProcessor:
    - swo/inboundMeasurementMetrics:
    - swo/spanStacktrace:
        duration: 2

  sampler:
    # Configure sampler.
    swo/sampler:

# Configure meter provider.
meter_provider:
  # Configure metric readers.
  readers:
    - # Configure a periodic metric reader.
      periodic:
        # Configure delay interval (in milliseconds) between start of two consecutive exports.
        interval: 100
        # Configure maximum allowed time (in milliseconds) to export data.
        timeout: 30000
        # Configure exporter.
        exporter:
          # Configure exporter to be OTLP.
          swo/metricExporter:
            # Configure protocol.
            protocol: grpc
            # Configure endpoint.
            endpoint: https://otel.collector.na-01.st-ssp.solarwinds.com
            # Configure certificate.
            certificate:
            # Configure mTLS private client key.
            client_key:
            # Configure mTLS client certificate.
            client_certificate:
            # Configure compression.
            compression: gzip
            # Configure max time (in milliseconds) to wait for each export.
            timeout: 10000
            # Configure headers. Entries have higher priority than entries from .headers_list.
            headers_list: ${OTEL_EXPORTER_OTLP_HEADERS}
            # Configure temporality preference.
            temporality_preference: cumulative
            # Configure default histogram aggregation.
            default_histogram_aggregation: explicit_bucket_histogram

# Configure logger provider.
logger_provider:
  # Configure log record processors.
  processors:
    - # Configure a batch log record processor.
      batch:
        # Configure delay interval (in milliseconds) between two consecutive exports.
        schedule_delay: 1000
        # Configure maximum allowed time (in milliseconds) to export data.
        export_timeout: 30000
        # Configure maximum queue size.
        max_queue_size: 2048
        # Configure maximum batch size.
        max_export_batch_size: 512
        # Configure exporter.
        exporter:
          # Configure exporter to be OTLP.
          otlp:
            # Configure protocol.
            protocol: grpc
            # Configure endpoint.
            endpoint: https://otel.collector.na-01.st-ssp.solarwinds.com
            # Configure certificate.
            certificate:
            # Configure mTLS private client key.
            client_key:
            # Configure mTLS client certificate.
            client_certificate:
            # Configure compression.
            compression: gzip
            # Configure max time (in milliseconds) to wait for each export.
            timeout: 10000
            # Configure headers. Entries have higher priority than entries from .headers_list.
            headers_list: ${OTEL_EXPORTER_OTLP_HEADERS}

  # Configure log record limits. See also attribute_limits.
  limits:
    # Configure max attribute value size. Overrides .attribute_limits.attribute_value_length_limit.
    attribute_value_length_limit: # Configure max log record attribute count. Overrides attribute_limits.attribute_count_limit.

    # Configure max attribute count. Overrides .attribute_limits.attribute_count_limit.
    attribute_count_limit: 128

instrumentation:
  java:
    common:
      default-enabled: true
    solarwinds:
      agent.logging:
        level: trace
      agent.sqlTag: true
      agent.tracingMode: enabled
      agent.sqlTagPrepared: true
      agent.sqlTagDatabases:
        - postgresql
      agent.spanStacktraceFilters:
        - http.request.method
      agent.transactionSettings:
        -
          regex: ".*/specialties"
          tracing: "disabled"
      agent.urlSampleRates:
        -
          example.com/greet:
            sampleRate: 100000000
            tracing: "enabled"
      agent.transactionNameSchemes:
        -
          scheme: "spanAttribute"
          delimiter: ":"
          attributes:
            - HandlerName
      agent.serviceKey: ${SW_APM_SERVICE_KEY}
      agent.collector: apm.collector.na-01.st-ssp.solarwinds.com
      monitor.jmx.enable: true
      monitor.jmx.scopes: |
        {
          "java.lang:type=MemoryPool,*": [
            "Usage"
          ],
          "java.lang:type=Memory": [
            "HeapMemoryUsage",
            "NonHeapMemoryUsage"
          ],
          "java.lang:type=GarbageCollector,*": [
            "CollectionTime"
          ],
          "java.lang:type=Threading": [
            "ThreadCount"
          ],
          "java.lang:type=OperatingSystem": [
            "ProcessCpuTime",
            "AvailableProcessors",
            "ProcessCpuLoad"
          ],
          "java.lang:type=Runtime,*": [
            "Uptime"
          ]
        }
