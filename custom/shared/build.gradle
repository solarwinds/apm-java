/*
 * Â© SolarWinds Worldwide, LLC. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
  id "com.github.jarmstrong.buildconfig" version "1.9.0"
}

dependencies {
  compileOnly project(path: ":bootstrap")
  compileOnly 'org.projectlombok:lombok:1.18.28'
  annotationProcessor 'org.projectlombok:lombok:1.18.28'

  compileOnly "com.solarwinds.joboe:config:${versions.joboe}"
  compileOnly "com.solarwinds.joboe:logging:${versions.joboe}"

  compileOnly "com.solarwinds.joboe:sampling:${versions.joboe}"
  annotationProcessor 'com.google.auto.service:auto-service:1.0.1'
  compileOnly "com.google.auto.service:auto-service-annotations:1.0.1"

  compileOnly("io.opentelemetry:opentelemetry-api:${versions.opentelemetry}")
  compileOnly("io.opentelemetry.semconv:opentelemetry-semconv:${versions.opentelemetrySemconv}")
  compileOnly("io.opentelemetry:opentelemetry-sdk-extension-autoconfigure:${versions.opentelemetry}")

  compileOnly("io.opentelemetry.javaagent:opentelemetry-javaagent-tooling:${versions.opentelemetryJavaagentAlpha}")
  compileOnly("io.opentelemetry.javaagent:opentelemetry-javaagent-extension-api:${versions.opentelemetryJavaagentAlpha}")

  implementation "org.json:json:${versions.json}"
  implementation "com.google.code.gson:gson:2.10.1"
  implementation "com.github.ben-manes.caffeine:caffeine:${versions.caffeine}"

  testImplementation("org.json:json:${versions.json}")
  testImplementation "com.solarwinds.joboe:sampling:${versions.joboe}"
}

test {
  useJUnitPlatform()
  testLogging {
    events "passed", "skipped", "failed"
  }
}

spotlessJava {
  dependsOn("generateBuildConfig")
}

buildConfig {
  packageName("com.solarwinds.opentelemetry.extensions")
  buildConfigField('String', 'OTEL_AGENT_VERSION', "\"${versions.opentelemetryJavaagent}\"")
  buildConfigField('String', 'SOLARWINDS_AGENT_VERSION', "\"${versions.agent}\"")
  buildConfigField('String', 'BUILD_DATETIME', "\"${new Date().format('LLL dd, yyyy - HH:mm:ss z')}\"")
}

compileJava {
  options.release.set(8)
}
