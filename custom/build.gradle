plugins {
  id "java"
  id "com.github.jarmstrong.buildconfig" version "1.9.0"
}

dependencies {
  compileOnly("io.opentelemetry:opentelemetry-sdk-extension-autoconfigure:${versions.opentelemetryAlpha}")
  compileOnly("io.opentelemetry.javaagent:opentelemetry-javaagent-extension-api:${versions.opentelemetryJavaagentAlpha}")
  compileOnly("io.opentelemetry.javaagent:opentelemetry-javaagent-tooling:${versions.opentelemetryJavaagentAlpha}")
  compileOnly("io.opentelemetry.instrumentation:opentelemetry-instrumentation-api:${versions.opentelemetryJavaagent}")
  compileOnly("io.opentelemetry:opentelemetry-semconv:${versions.opentelemetryAlpha}")
  compileOnly('org.checkerframework:checker-qual:3.32.0')
  compileOnly project(path: ":bootstrap")

  compileOnly 'org.slf4j:slf4j-api:2.0.6'
  compileOnly "com.appoptics.agent.java:core:${versions.appopticsCore}"
  compileOnly "com.appoptics.agent.java:metrics:${versions.appopticsMetrics}"

  compileOnly 'org.projectlombok:lombok:1.18.28'
  annotationProcessor 'org.projectlombok:lombok:1.18.28'
  compileOnly "com.google.auto.service:auto-service-annotations:1.0.1"
  annotationProcessor 'com.google.auto.service:auto-service:1.0.1'
  testImplementation project(path: ":bootstrap")


  testImplementation 'org.mockito:mockito-core:5.3.0'
  testImplementation 'org.mockito:mockito-junit-jupiter:5.3.0'
  testImplementation 'javax.annotation:javax.annotation-api:1.3.2'

  testImplementation 'org.mockito:mockito-inline:5.2.0'
  testImplementation("org.junit.jupiter:junit-jupiter-api:5.9.2")
  testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.9.2")

  testImplementation("io.opentelemetry:opentelemetry-sdk-extension-autoconfigure:${versions.opentelemetryAlpha}")
  testImplementation("io.opentelemetry.javaagent:opentelemetry-javaagent-extension-api:${versions.opentelemetryJavaagentAlpha}")
  testImplementation("io.opentelemetry.javaagent:opentelemetry-javaagent-tooling:${versions.opentelemetryJavaagentAlpha}")

  testImplementation("io.opentelemetry.instrumentation:opentelemetry-instrumentation-api:${versions.opentelemetryJavaagent}")
  testImplementation("io.opentelemetry:opentelemetry-semconv:${versions.opentelemetryAlpha}")
  testImplementation "com.appoptics.agent.java:core:${versions.appopticsCore}"
  testImplementation "com.appoptics.agent.java:metrics:${versions.appopticsMetrics}"

}

buildConfig {
  packageName("com.appoptics.opentelemetry.extensions.initialize.config")
  buildConfigField('String', 'OTEL_AGENT_VERSION', "\"${versions.opentelemetry}\"")
  buildConfigField('String', 'SOLARWINDS_AGENT_VERSION', "\"${versions.agent}\"")
  buildConfigField('String', 'BUILD_DATETIME', "\"${new Date().format('LLL dd, yyyy - HH:mm:ss z')}\"")
}

tasks.withType(Checkstyle).configureEach {
  exclude '**/BuildConfig.java'
  exclude '**/transaction/**'
}

test {
  useJUnitPlatform()
  testLogging {
    events "passed", "skipped", "failed"
  }
  environment("SW_APM_SERVICE_KEY", "00000")
}