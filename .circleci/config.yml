version: 2.1 # use CircleCI 2.1
orbs:
  aws-util: solarwindscloud/aws@0
  win: circleci/windows@5.0
  aws-cli: circleci/aws-cli@4.1.2
  ghas: solarwinds-cloud/ghas@0.1.1

envs: &default-envs
  PROJECT_NAME: solarwinds-apm-java
  SLACK_NOTIFY_CHANNEL: "#chubi-test"
  EMOJI: ":circle-pass:"
  GITHUB_USERNAME: lt-global-circleci

executors:
  java:
    resource_class: xlarge
    parameters:
      tag:
        type: string
        default: 12-jdk-hotspot
    docker: # use docker images curated by solarwinds. the script that builds them is here: https://github.com/librato/ci-scripts
      - image: 377069709311.dkr.ecr.us-east-1.amazonaws.com/base_ci_build:<< parameters.tag >>
        aws_auth:
          # below environment variables are provided by attaching AWS_CIRCLE_CI_BUILD context to the job
          aws_access_key_id: $ECR_AWS_ACCESS_KEY_ID
          aws_secret_access_key: $ECR_AWS_SECRET_ACCESS_KEY
    working_directory: ~/repo
    environment:
      <<: *default-envs

  linux:
    machine:
      image: ubuntu-2204:2022.04.1
    resource_class: medium+
    environment:
      <<: *default-envs

commands:
  cache-it:
    steps:
      - restore_cache:
          keys:
            - v2-dependencies-{{ checksum "build.gradle" }}
            # fallback to using the latest cache if no exact match is found
            - v2-dependencies-
      - run:
          name: Build classes
          command: ./gradlew classes
      - save_cache:
          paths:
            - ~/.gradle/caches
          key: v2-dependencies-{{ checksum "build.gradle" }}
  initialize-me:
    steps:
      - checkout
      - run:
          name: Install jq # this is needed for the aws steps to work
          command: apt-get update && apt-get install -y --no-install-recommends jq && rm -rf /var/lib/apt/lists/*
      - run:
          name: Build
          command: ./gradlew clean build -x test
  install-jdk-17:
    steps:
      - run:
          name: Install OpenJDK 17
          command: |
            sudo apt-get update && sudo apt-get install openjdk-17-jdk
            sudo update-alternatives --set java /usr/lib/jvm/java-17-openjdk-amd64/bin/java
            sudo update-alternatives --set javac /usr/lib/jvm/java-17-openjdk-amd64/bin/javac
            java -version
  docker-login:
    steps:
      - run:
          name: Docker login
          command: echo "$GITHUB_TOKEN" | docker login ghcr.io -u $GITHUB_USERNAME --password-stdin
  docker-logout:
    steps:
      - run:
          name: Docker logout
          command: docker logout
jobs:
  lambda-release-test:
    executor: linux
    environment:
      LAMBDA: "true"
    steps:
      - install-jdk-17
      - checkout
      - run:
          name: Build smoke-test
          command: |
            cd smoke-tests
            ./gradlew build -x test
      - docker-login
      - run:
          name: Execute smoke tests
          command: |
            cd smoke-tests
            ./gradlew test
      - store_artifacts:
          path: smoke-tests/build/reports/tests/test
      - docker-logout
  lambda-publish-stage:
    executor: linux
    steps:
      - checkout
      - aws-cli/setup:
          role_arn: ${AWS_LAMBDA_ROLE}
      - run:
          name: Build agent
          command: ./gradlew clean build -x test
      - run:
          name: Create zip
          command: ./gradlew :agent:lambda-layer
      - run:
          # this step adds the script stored in .circleci/version.sh to the BASH startup script so the agent version is available
          # for subsequent steps
          name: Store version
          command: |
            cat .circleci/version.sh >> $BASH_ENV
      - run:
          name: Create lambda layer
          command: |
            regions=(
            "ap-northeast-1"
            "ap-northeast-2"
            "ap-south-1"
            "ap-southeast-1"
            "ap-southeast-2"
            "ca-central-1"
            "eu-central-1"
            "eu-north-1"
            "eu-west-1"
            "eu-west-2"
            "eu-west-3"
            "sa-east-1"
            "us-east-1"
            "us-east-2"
            "us-west-1"
            "us-west-2")
            
            VERSION=$(echo "$AGENTVERSION" | sed 's/[.]/_/g')
            LAYER_NAME="solarwinds-apm-java-$VERSION"
            touch arns.txt
            
            for region in "${regions[@]}"; do
              aws lambda publish-layer-version \
                          --layer-name $LAYER_NAME \
                          --compatible-runtimes "java17" "java11" "java8.al2" "java8" \
                          --compatible-architectures "x86_64" "arm64" \
                          --description "Solarwinds' apm java lambda instrumentation layer, version: $AGENTVERSION" \
                          --region "$region" \
                          --zip-file fileb://agent/build/lambda-layer/layer.zip \
                          --query 'LayerVersionArn' \
                          --output text >> arns.txt
            done
      - store_artifacts:
          path: arns.txt
  benchmark:
    executor: linux
    environment:
      <<: *default-envs
    steps:
      - checkout
      - docker-login
      - run:
          name: Benchmark test
          command: |
            cd benchmark
            ./gradlew test
      - store_artifacts:
          path: benchmark/results/release/summary.txt
      - store_artifacts:
          path: benchmark/build/reports/tests/test/
      - docker-logout
  release-test:
    executor: linux
    environment:
      LAMBDA: "false"
    steps:
      - install-jdk-17
      - checkout
      - run:
          name: Build smoke-test
          command: |
            cd smoke-tests
            ./gradlew build -x test
      - docker-login
      - run:
          name: Build webmvc jar
          command: |
            cd smoke-tests
            ./gradlew :spring-boot-webmvc:build
      - run:
          name: Build webmvc image
          command: |
            cd smoke-tests/spring-boot-webmvc
            docker image build --tag smt:webmvc .
      - run:
          name: Execute smoke tests
          command: |
            cd smoke-tests
            ./gradlew test
      - store_artifacts:
          path: smoke-tests/build/reports/tests/test
      - docker-logout
  os-test-linux:
    executor: linux
    environment:
      SW_APM_DEBUG_LEVEL: trace
      AGENT_DOWNLOAD_URL: https://agent-binaries.global.st-ssp.solarwinds.com/apm/java/latest/solarwinds-apm-agent.jar
    steps:
      - checkout
      - run:
          name: Execute Netty app
          command: |
            cd smoke-tests
            ./gradlew :netty-test:run
  os-test-windows:
    executor: win/server-2022
    environment:
      <<: *default-envs
      SW_APM_DEBUG_LEVEL: trace
      AGENT_DOWNLOAD_URL: https://agent-binaries.global.st-ssp.solarwinds.com/apm/java/latest/solarwinds-apm-agent.jar
    steps:
      - checkout
      - run:
          name: Execute Netty app
          shell: bash.exe
          command:  |
            cd smoke-tests
            ./gradlew :netty-test:run
  test: # this job executes tests
    executor: java
    steps:
      - checkout
      - run:
          name: Build agent
          command: ./gradlew clean build -x test
      - run:
          name: Execute tests
          command: ./gradlew test
      - run:
          name: Check shading
          command: |
            code=0
            for path in $(jar -tf agent/build/libs/solarwinds-apm-agent.jar | grep -E -v '^((com/solarwinds|com/appoptics|inst|io/open|META))')
            do
              PACKAGE=$(echo "$path" | awk -F/ '{print $2}')
              if [ -n "$PACKAGE" ] && [ "$PACKAGE" != "annotation" ]; then
                echo "Package ($path) is not shaded"
                code=1
              fi
            done
            exit $code
  maven-release: # this job runs the maven release as configured in build.gradle
    executor: java
    steps:
      - checkout
      - run:
          name: release
          command: ./gradlew clean publish
  github-release: # this job runs creates a git release and tag from the last commit on the current branch
    executor: java
    steps:
      - checkout
      - run:
          name: Configure git for release
          command: |
            git config user.name "${GITHUB_USERNAME}"
            git config user.email "${GITHUB_USERNAME}-github@solarwinds.com"
      - run:
          name: Rewrite github url for release tagging
          command: |
            git config --global url."https://${GITHUB_TOKEN}:@github.com/".insteadOf git@github.com:
      - run:
          name: Build
          command: ./gradlew clean build -x test
      - run:
          name: Perform release
          command: |
            VERSION=$(unzip -p agent/build/libs/solarwinds-apm-agent.jar META-INF/MANIFEST.MF | grep Implementation-Version | awk '{ print $2 }')
            VERSION=$(echo $VERSION | sed 's/[^a-z0-9.-]//g') # remove illegal characters
            echo "Current version is $VERSION"
            
            curl -f -L \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${GITHUB_TOKEN}"\
              -H "X-GitHub-Api-Version: 2022-11-28" \
              https://api.github.com/repos/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/releases \
              -d '{"tag_name":"v'"$VERSION"'", "name":"v'"$VERSION"'", "body":"New release: v'"$VERSION"'", "draft":false, "prerelease":false}'
            
            source /ci-scripts/bin/helpers.sh
            send_to_slack "A new release is ready \`$VERSION\`"
  s3-stage-upload:  # this job uploads the jar to stage s3
    executor: java
    steps:
      - initialize-me
      - aws-util/assume-role:
          iam-role-arn: $AWS_S3_ROLE_ARN_SSP_STAGE
          install-cli: true
      - run:
          # this step adds the script stored in .circleci/version.sh to the BASH startup script so the agent version is available
          # for subsequent steps
          name: Store version
          command: |
            cat .circleci/version.sh >> $BASH_ENV
      - run:
          name: Copy to S3
          command: |
            aws s3 cp agent/build/libs/solarwinds-apm-agent.jar \
            s3://ssp-stage-global-agent-binaries/apm/java/$AGENTVERSION/solarwinds-apm-agent.jar \
            --acl public-read
            
            aws s3 cp custom/src/main/resources/solarwinds-apm-config.json \
            s3://ssp-stage-global-agent-binaries/apm/java/$AGENTVERSION/solarwinds-apm-config.json \
            --acl public-read
      - run:
          name: Copy to S3(latest)
          command: |
            aws s3 cp s3://ssp-stage-global-agent-binaries/apm/java/$AGENTVERSION/solarwinds-apm-agent.jar \
            s3://ssp-stage-global-agent-binaries/apm/java/latest/solarwinds-apm-agent.jar \
            --acl public-read

            aws s3 cp s3://ssp-stage-global-agent-binaries/apm/java/$AGENTVERSION/solarwinds-apm-config.json \
            s3://ssp-stage-global-agent-binaries/apm/java/latest/solarwinds-apm-config.json \
            --acl public-read
            
            touch VERSION
            echo "version: $AGENTVERSION" >> VERSION
            SHA256=$(sha256sum agent/build/libs/solarwinds-apm-agent.jar)
            echo "sha256: $SHA256" >> VERSION
            
            aws s3 cp VERSION \
            s3://ssp-stage-global-agent-binaries/apm/java/latest/VERSION \
            --acl public-read
      - run:
          name: Send to slack
          command: |
            source /ci-scripts/bin/helpers.sh
            send_to_slack "A new release:\`$AGENTVERSION\` is ready for download in stage bucket"
  s3-prod-upload:  # this job uploads the jar and default config json to prod s3
    executor: java
    steps:
      - initialize-me
      - aws-util/assume-role:
          iam-role-arn: $AWS_S3_ROLE_ARN_SSP_PROD
          install-cli: true
      - run:
          # this step adds the script stored in .circleci/version.sh to the BASH startup script so the agent version is available
          # for subsequent steps
          name: Store version
          command: |
            cat .circleci/version.sh >> $BASH_ENV
      - run:
          name: Check version doesn't exist
          command: |
            # make sure this version hasn't been pushed to prod yet
            if curl -f -s "https://agent-binaries.cloud.solarwinds.com/apm/java/$AGENTVERSION/solarwinds-apm-config.json" > /dev/null; then
                echo "This version has been deployed to production already!"
                exit 1
            fi
      - run:
          name: Copy to S3
          command: |
            aws s3 cp agent/build/libs/solarwinds-apm-agent.jar \
            s3://ssp-prod-global-agent-binaries/apm/java/$AGENTVERSION/solarwinds-apm-agent.jar \
            --acl public-read

            aws s3 cp custom/src/main/resources/solarwinds-apm-config.json \
            s3://ssp-prod-global-agent-binaries/apm/java/$AGENTVERSION/solarwinds-apm-config.json \
            --acl public-read
      - run:
          name: Copy to S3(latest)
          command: |
            aws s3 cp s3://ssp-prod-global-agent-binaries/apm/java/$AGENTVERSION/solarwinds-apm-agent.jar \
            s3://ssp-prod-global-agent-binaries/apm/java/latest/solarwinds-apm-agent.jar \
            --acl public-read

            aws s3 cp s3://ssp-prod-global-agent-binaries/apm/java/$AGENTVERSION/solarwinds-apm-config.json \
            s3://ssp-prod-global-agent-binaries/apm/java/latest/solarwinds-apm-config.json \
            --acl public-read
            
            touch VERSION
            echo "version: $AGENTVERSION" >> VERSION
            SHA256=$(sha256sum agent/build/libs/solarwinds-apm-agent.jar)
            echo "sha256: $SHA256" >> VERSION
            
            aws s3 cp VERSION \
            s3://ssp-stage-global-agent-binaries/apm/java/latest/VERSION \
            --acl public-read
      - run:
          name: Send to slack
          command: |
            source /ci-scripts/bin/helpers.sh
            send_to_slack "A new release:\`$AGENTVERSION\` is ready for download in prod bucket"

workflows:
  build_test_release:
    jobs:
      - test:
          context:
            - AWS_CIRCLE_CI_BUILD
            - solarwinds-cloud-github-read-access
      - release-test:
          context:
            - AWS_CIRCLE_CI_BUILD
            - solarwinds-cloud-github-read-access
            - java-apm-smoke-test
          requires:
            - s3-stage-upload
      - os-test-linux:
          context:
            - AWS_CIRCLE_CI_BUILD
            - solarwinds-cloud-github-read-access
            - java-apm-smoke-test
          requires:
            - s3-stage-upload
      - os-test-windows:
          context:
            - AWS_CIRCLE_CI_BUILD
            - solarwinds-cloud-github-read-access
            - java-apm-smoke-test
          requires:
            - s3-stage-upload
      - approve_me:
          type: approval
          requires:
            - test
            - release-test
          filters:
            branches:
              only: main
      - github-release:
          context:
            - AWS_CIRCLE_CI_BUILD
            - solarwinds-cloud-github-read-access
            - solarwinds-cloud-github-write-access
            - SLACK_HOOK
          requires:
            - s3-prod-upload
          filters:
            branches:
              only: main
      - maven-release:
          context:
            - AWS_CIRCLE_CI_BUILD
            - solarwinds-cloud-github-read-access
            - solarwinds-cloud-github-write-access
            - sonatype
            - apm-gpg-signing
          requires:
            - s3-prod-upload
          filters:
            branches:
              only: main
      - s3-stage-upload:
          context:
            - AWS_CIRCLE_CI
            - AWS_CIRCLE_CI_BUILD
            - solarwinds-cloud-github-read-access
            - SLACK_HOOK
            - apm-s3-publishing
      - s3-prod-upload:
          context:
            - AWS_CIRCLE_CI
            - AWS_CIRCLE_CI_BUILD
            - solarwinds-cloud-github-read-access
            - SLACK_HOOK
            - apm-s3-publishing
          requires:
            - approve_me
          filters:
            branches:
              only: main
  benchmarking:
    jobs:
      - benchmark:
          context:
            - AWS_CIRCLE_CI_BUILD
            - solarwinds-cloud-github-read-access
  lambda-build:
    jobs:
      - lambda-publish-stage:
          context:
            - AWS_CIRCLE_CI_BUILD
            - solarwinds-cloud-github-read-access
            - aws-apm-lambda-agent-publish
          requires:
            - test
            - lambda-release-test
          filters:
            branches:
              only: cc/lambda-pr
      - test:
          context:
            - AWS_CIRCLE_CI_BUILD
            - solarwinds-cloud-github-read-access
      - s3-stage-upload:
          context:
            - AWS_CIRCLE_CI
            - AWS_CIRCLE_CI_BUILD
            - solarwinds-cloud-github-read-access
            - SLACK_HOOK
            - apm-s3-publishing
          filters:
            branches:
              only: cc/lambda-pr
      - lambda-release-test:
          context:
            - AWS_CIRCLE_CI_BUILD
            - solarwinds-cloud-github-read-access
            - java-apm-smoke-test
          requires:
            - s3-stage-upload
  code-scanning:
    jobs:
      - ghas/codeql:
          executor: java
          checkout: true
          category: solarwinds-apm-java-scan
          build_steps:
            - run:
                name: Build project
                command:  ./gradlew clean build -x test
          language: java
          suite: security-and-quality
          context:
            - ghas-code-scanning
            - AWS_CIRCLE_CI_BUILD
            - solarwinds-cloud-github-write-access
