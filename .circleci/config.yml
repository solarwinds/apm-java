version: 2.1 # use CircleCI 2.1
orbs:
  aws-util: solarwindscloud/aws@0

executors:
  java:
    parameters:
      tag:
        type: string
        default: 12-jdk-hotspot
    docker: # use docker images curated by solarwinds. the script that builds them is here: https://github.com/librato/ci-scripts
      - image: 377069709311.dkr.ecr.us-east-1.amazonaws.com/base_ci_build:<< parameters.tag >>
        aws_auth:
          # below environment variables are provided by attaching AWS_CIRCLE_CI_BUILD context to the job
          aws_access_key_id: $ECR_AWS_ACCESS_KEY_ID
          aws_secret_access_key: $ECR_AWS_SECRET_ACCESS_KEY
    working_directory: ~/repo
    environment:
      PROJECT_NAME: solarwinds-apm-java
      SLACK_NOTIFY_CHANNEL: "#chubi-test"
      EMOJI: ":circle-pass:"
      GITHUB_USERNAME: lt-global-circleci

commands:
  cacheit:
    steps:
      - restore_cache:
          keys:
            - v2-dependencies-{{ checksum "build.gradle" }}
            # fallback to using the latest cache if no exact match is found
            - v2-dependencies-
      - run:
          name: Build classes
          command: ./gradlew classes
      - save_cache:
          paths:
            - ~/.gradle/caches
          key: v2-dependencies-{{ checksum "build.gradle" }}
  initialize-me:
    steps:
      - checkout
      - cacheit
      - run:
          name: Install jq # this is needed for the aws steps to work
          command: apt-get update && apt-get install -y --no-install-recommends jq && rm -rf /var/lib/apt/lists/*
      - run:
          name: Build
          command: ./gradlew clean build -x test
jobs:
  test: # this job executes tests
    executor: java
    steps:
      - checkout
      - cacheit
      - run:
          name: Execute tests
          command: ./gradlew clean test
  maven-release: # this job runs the maven release as configured in build.gradle
    executor: java
    steps:
      - checkout
      - cacheit
      - run:
          name: release
          command: ./gradlew clean publish
  github-release: # this job runs creates a git release and tag from the last commit on the current branch
    executor: java
    steps:
      - checkout
      - cacheit
      - run:
          name: Configure git for release
          command: |
            git config user.name "${GITHUB_USERNAME}"
            git config user.email "${GITHUB_USERNAME}-github@solarwinds.com"
      - run:
          name: Rewrite github url for release tagging
          command: |
            git config --global url."https://${GITHUB_TOKEN}:@github.com/".insteadOf git@github.com:
      - run:
          name: Build
          command: ./gradlew clean build -x test
      - run:
          name: Perform release
          command: |
            VERSION=$(unzip -p agent/build/libs/solarwinds-apm-agent.jar META-INF/MANIFEST.MF | grep Implementation-Version | awk '{ print $2 }')
            VERSION=$(echo $VERSION | sed 's/[^a-z0-9.-]//g') # remove illegal characters
            echo "Current version is $VERSION"
            
            curl -f -L \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${GITHUB_TOKEN}"\
              -H "X-GitHub-Api-Version: 2022-11-28" \
              https://api.github.com/repos/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/releases \
              -d '{"tag_name":"v'"$VERSION"'", "name":"v'"$VERSION"'", "body":"New release: v'"$VERSION"'", "draft":false, "prerelease":false}'
            
            source /ci-scripts/bin/helpers.sh
            send_to_slack "A new release is ready \`$VERSION\`"
  s3-stage-upload:  # this job uploads the jar to stage s3
    executor: java
    steps:
      - initialize-me
      - aws-util/assume-role:
          iam-role-arn: $AWS_S3_ROLE_ARN_SSP_STAGE
          install-cli: true
      - run:
          # this step adds the script stored in .circleci/version.sh to the BASH startup script so the agent version is available
          # for subsequent steps
          name: Store version
          command: |
            cat .circleci/version.sh >> $BASH_ENV
      - run:
          name: Copy to S3
          command: |
            aws s3 cp agent/build/libs/solarwinds-apm-agent.jar \
            s3://ssp-stage-global-agent-binaries/apm/java/$AGENTVERSION/solarwinds-apm-agent.jar \
            --acl public-read
            
            aws s3 cp custom/src/main/resources/solarwinds-apm-config.json \
            s3://ssp-stage-global-agent-binaries/apm/java/$AGENTVERSION/solarwinds-apm-config.json \
            --acl public-read
      - run:
          name: Copy to S3(latest)
          command: |
            aws s3 cp s3://ssp-stage-global-agent-binaries/apm/java/$AGENTVERSION/solarwinds-apm-agent.jar \
            s3://ssp-stage-global-agent-binaries/apm/java/latest/solarwinds-apm-agent.jar \
            --acl public-read

            aws s3 cp s3://ssp-stage-global-agent-binaries/apm/java/$AGENTVERSION/solarwinds-apm-config.json \
            s3://ssp-stage-global-agent-binaries/apm/java/latest/solarwinds-apm-config.json \
            --acl public-read
      - run:
          name: Send to slack
          command: |
            source /ci-scripts/bin/helpers.sh
            send_to_slack "A new release:\`$AGENTVERSION\` is ready for download in stage bucket"
  s3-prod-upload:  # this job uploads the jar and default config json to prod s3
    executor: java
    steps:
      - initialize-me
      - aws-util/assume-role:
          iam-role-arn: $AWS_S3_ROLE_ARN_SSP_PROD
          install-cli: true
      - run:
          # this step adds the script stored in .circleci/version.sh to the BASH startup script so the agent version is available
          # for subsequent steps
          name: Store version
          command: |
            cat .circleci/version.sh >> $BASH_ENV
      - run:
          name: Check version doesn't exist
          command: |
            # make sure this version hasn't been pushed to prod yet
            if curl -f -s "https://agent-binaries.cloud.solarwinds.com/apm/java/$AGENTVERSION/solarwinds-apm-config.json" > /dev/null; then
                echo "This version has been deployed to production already!"
                exit 1
            fi
      - run:
          name: Copy to S3
          command: |
            aws s3 cp agent/build/libs/solarwinds-apm-agent.jar \
            s3://ssp-prod-global-agent-binaries/apm/java/$AGENTVERSION/solarwinds-apm-agent.jar \
            --acl public-read

            aws s3 cp custom/src/main/resources/solarwinds-apm-config.json \
            s3://ssp-prod-global-agent-binaries/apm/java/$AGENTVERSION/solarwinds-apm-config.json \
            --acl public-read
      - run:
          name: Copy to S3(latest)
          command: |
            aws s3 cp s3://ssp-prod-global-agent-binaries/apm/java/$AGENTVERSION/solarwinds-apm-agent.jar \
            s3://ssp-prod-global-agent-binaries/apm/java/latest/solarwinds-apm-agent.jar \
            --acl public-read

            aws s3 cp s3://ssp-prod-global-agent-binaries/apm/java/$AGENTVERSION/solarwinds-apm-config.json \
            s3://ssp-prod-global-agent-binaries/apm/java/latest/solarwinds-apm-config.json \
            --acl public-read
      - run:
          name: Send to slack
          command: |
            source /ci-scripts/bin/helpers.sh
            send_to_slack "A new release:\`$AGENTVERSION\` is ready for download in prod bucket"

workflows:
  build_test_release:
    jobs:
      - test:
          context:
            - AWS_CIRCLE_CI_BUILD
            - GH_LIBRATO_CI_PKG_WRITE
      - approve_me:
          type: approval
          requires:
            - test
          filters:
            branches:
              only: main
      - github-release:
          context:
            - AWS_CIRCLE_CI_BUILD
            - GH_LIBRATO_CI_PKG_WRITE
            - SLACK_HOOK
          requires:
            - s3-prod-upload
          filters:
            branches:
              only: main
      - maven-release:
          context:
            - AWS_CIRCLE_CI_BUILD
            - GH_LIBRATO_CI_PKG_WRITE
            - sonatype
            - apm-gpg-signing
          requires:
            - s3-prod-upload
          filters:
            branches:
              only: main
#      - s3-stage-upload:
#          context:
#            - AWS_CIRCLE_CI
#            - AWS_CIRCLE_CI_BUILD
#            - GH_LIBRATO_CI_PKG_WRITE
#            - SLACK_HOOK
#            - apm-s3-publishing
      - s3-prod-upload:
          context:
            - AWS_CIRCLE_CI
            - AWS_CIRCLE_CI_BUILD
            - GH_LIBRATO_CI_PKG_WRITE
            - SLACK_HOOK
            - apm-s3-publishing
          requires:
            - approve_me
          filters:
            branches:
              only: main
