# This workflow runs the NH agent benchmarks (and benchmarks with the standard OpenTelemetry agent and without an agent as the baselines).
name: Benchmark

on: # add cron schedule if you plan to run it periodically.
  workflow_dispatch:
    inputs:
      agent-type:
        description: The benchmark will run with the NH agent by default, type AO to run with the AO agent.

jobs:
  run-overhead-tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    # check out the branch `benchmark-results` for staging the benchmark data and summary.
    - uses: actions/checkout@v3
      with:
        ref: benchmark-results
        path: benchmark-results
    - name: copy results from benchmark-results branch
      run: |
        rsync -avv benchmark-results/benchmark/results/ benchmark/results/
    - name: Log in to registry
      run: echo "${{ secrets.GP_TOKEN }}" | docker login ghcr.io -u ${{ secrets.GP_USERNAME }} --password-stdin
    - name: run tests
      uses: gradle/gradle-build-action@v2
      with:
        arguments: test
        build-root-directory: benchmark
      env:
        # These two secrets `secrets.GP_USERNAME` and `secrets.GP_TOKEN` are Github's PAT (Personal Access Token),
        # which are used to download private packages from Github Packages (in our case, the test collector docker image).
        # Currently the PAT is set up under the trace-build service account and just requires read:packages access to the Librato org.
        # (Check out this document about how to create a PAT: https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token)
        GP_USERNAME: ${{ secrets.GP_USERNAME }}
        GP_TOKEN: ${{ secrets.GP_TOKEN }}
        SOLARWINDS_SERVICE_KEY: ${{ secrets.SOLARWINDS_SERVICE_KEY }}
        APPOPTICS_SERVICE_KEY: ${{ secrets.APPOPTICS_SERVICE_KEY }}
        AGENT_TYPE: ${{ github.event.inputs.agent-type }}
    - name: inspect the results dir
      if: always()
      working-directory: benchmark
      run: ls -lR results
    - name: copy results back to gh-pages branch
      if: always()
      run: |
        rsync -avv benchmark/results/ benchmark-results/benchmark/results/ && rm -rf benchmark/results
        rsync -avv benchmark/build benchmark-results/benchmark/ && rm -rf benchmark/build
    - name: commit updated results
      if: always()
      run: |
        cd benchmark-results
        git config --global user.name "${{ secrets.GP_USERNAME }}"
        git add benchmark/build
        git commit -m "update test result data"
        git push origin
