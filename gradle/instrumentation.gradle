/*
 * Â© SolarWinds Worldwide, LLC. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'java'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'io.opentelemetry.instrumentation.muzzle-generation'
apply plugin: 'io.opentelemetry.instrumentation.muzzle-check'

apply from: "$rootDir/gradle/shadow.gradle"

def relocatePackages = ext.relocatePackages

dependencies {
  compileOnly("io.opentelemetry:opentelemetry-sdk:${versions.opentelemetry}")
  compileOnly("io.opentelemetry.instrumentation:opentelemetry-instrumentation-api:${versions.opentelemetryJavaagent}")
  compileOnly("io.opentelemetry.javaagent:opentelemetry-javaagent-extension-api:${versions.opentelemetryJavaagentAlpha}")

  compileOnly deps.bytebuddy
  annotationProcessor deps.autoservice
  compileOnly deps.autoservice

  // test dependencies
  testImplementation("io.opentelemetry.javaagent:opentelemetry-testing-common:${versions.opentelemetryJavaagentAlpha}")
  testImplementation("io.opentelemetry:opentelemetry-sdk-testing:${versions.opentelemetry}")
  testImplementation("org.assertj:assertj-core:3.19.0")

  add("codegen", "io.opentelemetry.javaagent:opentelemetry-javaagent-tooling:${versions.opentelemetryJavaagentAlpha}")
  add("muzzleBootstrap", "io.opentelemetry.instrumentation:opentelemetry-instrumentation-annotations-support:${versions.opentelemetryJavaagentAlpha}")
  add("muzzleTooling", "io.opentelemetry.javaagent:opentelemetry-javaagent-extension-api:${versions.opentelemetryJavaagentAlpha}")
  add("muzzleTooling", "io.opentelemetry.javaagent:opentelemetry-javaagent-tooling:${versions.opentelemetryJavaagentAlpha}")
}


shadowJar {
  archiveFileName = 'agent-testing.jar'
  configurations = [project.configurations.runtimeClasspath]

  mergeServiceFiles()
  relocatePackages(it)
}

evaluationDependsOn(":testing:agent-for-testing")

tasks.withType(Test).configureEach {
  def shadowJar = tasks.shadowJar
  def agentShadowJar = project(':testing:agent-for-testing').tasks.shadowJar

  dependsOn shadowJar
  dependsOn agentShadowJar

  inputs.file(shadowJar.archiveFile)
  jvmArgumentProviders.add(new JavaagentProvider(agentShadowJar.archiveFile, shadowJar.archiveFile))

  // The sources are packaged into the testing jar so we need to make sure to exclude from the test
  // classpath, which automatically inherits them, to ensure our shaded versions are used.
  classpath = classpath.filter {
    if (layout.buildDirectory.file('resources/main') == it || layout.buildDirectory.file('classes/java/main') == it) {
      return false
    }

    def lib = it.absoluteFile
    if (lib.name.startsWith("opentelemetry-javaagent-") && !lib.name.contains("extension-api")) {
      return false
    }

    if (lib.name.startsWith("opentelemetry-") && lib.name.contains("-autoconfigure-")) {
      return false
    }

    return true
  }
}

tasks.register('generateInstrumentationVersionFile') {
  def name = "com.solarwinds.${project.name}"
  def version = rootProject.version.toString()
  inputs.property('instrumentation.name', name)
  inputs.property('instrumentation.version', version)

  def propertiesDir = layout.buildDirectory.dir('generated/instrumentationVersion/META-INF/io/opentelemetry/instrumentation')
  outputs.dir(propertiesDir)

  doLast {
    new File(propertiesDir.get().asFile, "${name}.properties").text = "version=${version}"
  }
}

sourceSets {
  main {
    output.dir('build/generated/instrumentationVersion', builtBy: 'generateInstrumentationVersionFile')
  }
}

class JavaagentProvider implements CommandLineArgumentProvider {
  @InputFile
  @PathSensitive(PathSensitivity.RELATIVE)
  final Provider<RegularFile> agentJar

  @InputFile
  @PathSensitive(PathSensitivity.RELATIVE)
  final Provider<RegularFile> instrumentationJar

  JavaagentProvider(Provider<RegularFile> agentJar, Provider<RegularFile> instrumentationJar) {
    this.agentJar = agentJar
    this.instrumentationJar = instrumentationJar
  }

  @Override
  Iterable<String> asArguments() {
    return [
            "-javaagent:${agentJar.get().asFile.absolutePath}",
            "-Dotel.javaagent.experimental.initializer.jar=${instrumentationJar.get().asFile.absolutePath}",
            "-Dotel.javaagent.testing.additional-library-ignores.enabled=false",
            "-Dotel.javaagent.testing.fail-on-context-leak=true",
            "-Dsw.apm.service.key=give-me-a-token:test-app",
            "-Dsw.apm.sql.tag=true",
            "-Dsw.apm.sql.tag.prepared=true",
            // prevent sporadic gradle deadlocks, see SafeLogger for more details
            "-Dotel.javaagent.testing.transform-safe-logging.enabled=true",
            "-Dotel.javaagent.debug=true"]
  }
}
