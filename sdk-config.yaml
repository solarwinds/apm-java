# sdk-config.yaml is a typical starting point for configuring our custom distribution, including exporting to
# localhost via OTLP.

# NOTE: With the exception of env var substitution syntax (i.e. ${MY_ENV}), SDKs ignore
# environment variables when interpreting config files. This including ignoring all env
# vars defined in https://opentelemetry.io/docs/specs/otel/configuration/sdk-environment-variables/.

# The file format version.
file_format: "0.4"

# Configure if the SDK is disabled or not. This setting is optional, the default value when not provided is for the SDK to be enabled
disabled: false

# Configure resource for all signals.
resource:
  # Configure resource attributes. Entries have higher priority than entries from .resource.attributes_list.
  # Entries must contain .name nand .value, and may optionally include .type, which defaults ot "string" if not set. The value must match the type. Values for .type include: string, bool, int, double, string_array, bool_array, int_array, double_array.
  attributes:
    - name: service.name
      value: swi-test-app

# Configure general attribute limits. See also tracer_provider.limits, logger_provider.limits.
attribute_limits:

# Configure tracer provider.
tracer_provider:

# Configure meter provider.
meter_provider:

# Configure logger provider.
logger_provider:

instrumentation/development:
  java:
    common:
      default-enabled: true
    solarwinds:
      profiler:
        enabled: false
        interval: 20
        excludePackages:
          - java
          - javax
          - com.sun
          - sun
          - sunw
      agent.logging:
        level: info
      agent.serviceKey: ""
      # All `monitor.xxx` is now DEPRECATED and will be removed in a future version
      monitor.jmx.enable: true
      monitor.jmx.scopes: |
        {
          "java.lang:type=MemoryPool,*": [
            "Usage"
          ],
          "java.lang:type=Memory": [
            "HeapMemoryUsage",
            "NonHeapMemoryUsage"
          ],
          "java.lang:type=GarbageCollector,*": [
            "CollectionTime"
          ],
          "java.lang:type=Threading": [
            "ThreadCount"
          ],
          "java.lang:type=OperatingSystem": [
            "ProcessCpuTime",
            "AvailableProcessors",
            "ProcessCpuLoad"
          ],
          "java.lang:type=Runtime,*": [
            "Uptime"
          ]
        }
