import groovy.json.JsonBuilder
import groovy.json.JsonSlurper

import java.net.http.HttpClient
import java.net.http.HttpRequest
import java.net.http.HttpResponse
import java.util.regex.Pattern

plugins {
    id 'java'
}

group = 'com.solarwinds'
version = 'unspecified'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation platform("org.testcontainers:testcontainers-bom:1.19.1")
    testImplementation("org.testcontainers:testcontainers")
    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation("org.testcontainers:postgresql")
    testImplementation("com.squareup.okhttp3:okhttp:4.9.1")
    testCompileOnly 'org.projectlombok:lombok:1.18.28'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.28'

    testImplementation 'ch.qos.logback:logback-classic:1.4.11'
    testImplementation("com.jayway.jsonpath:json-path:2.8.0")

}

sourceSets {
    test {
        resources {
            srcDir file('src/test/java')
            exclude '**/*.java'
        }
    }
}

static Boolean aws() {
    try {
        def url = new URL("http://169.254.169.254/latest/api/token")
        def req = HttpRequest.newBuilder(url.toURI())
                .header("X-aws-ec2-metadata-token-ttl-seconds", "100")
                .PUT(HttpRequest.BodyPublishers.noBody())
                .build()

        def res = HttpClient.newHttpClient()
                .send(req, HttpResponse.BodyHandlers.ofString())
        return res.statusCode() == 200

    } catch (Exception ignored) {
        return false
    }
}

static Boolean azure() {
    try {
        def url = new URL("http://169.254.169.254/metadata/instance?api-version=2021-12-13")
        def req = HttpRequest.newBuilder(url.toURI())
                .header("Metadata", "true")
                .GET()
                .build()

        def res = HttpClient.newHttpClient()
                .send(req, HttpResponse.BodyHandlers.ofString())
        return res.statusCode() == 200

    } catch (Exception ignored) {
        return false
    }
}

static Map<String, Object> addAuth(Map<String, Object> envs) {
  try {
    def cookieStore = new InMemoryCookieStore()
    def httpClient = HttpClient.newBuilder().cookieHandler(new CookieManager(cookieStore, CookiePolicy.ACCEPT_ALL))
        .followRedirects(HttpClient.Redirect.ALWAYS)
        .build()

    def httpRequest = HttpRequest.newBuilder()
        .uri(URI.create(envs.get("SWO_HOST_URL").toString()))
        .GET().build()

    def httpResponse = httpClient.send(httpRequest, HttpResponse.BodyHandlers.ofString())
    def loginParams = httpResponse.uri().toString().split('\\?')[1]
    def login_data = [
        "email"           : envs.get("SWO_EMAIL"),
        "password"        : envs.get("SWO_PWORD"),
        "loginQueryParams": loginParams,
    ]

    def loginRequest = HttpRequest.newBuilder().uri(URI.create(envs.get("SWO_LOGIN_URL").toString())).POST(
        HttpRequest.BodyPublishers.ofString(new JsonBuilder(login_data).toPrettyString())
    ).header("Content-Type", "application/json").build()

    def loginResponse = httpClient.send(loginRequest, HttpResponse.BodyHandlers.ofString())
    def signBody = new JsonSlurper().parseText(loginResponse.body()) as Map<String, String>

    def redirectLoginReq = HttpRequest.newBuilder().GET()
        .uri(URI.create(signBody.get("redirectUrl")))
        .build()

    httpClient.send(redirectLoginReq, HttpResponse.BodyHandlers.ofString())
    def finalLoginResp = httpClient.send(HttpRequest.newBuilder(URI.create(envs.get("SWO_HOST_URL").toString()))
        .GET()
        .build(), HttpResponse.BodyHandlers.ofString())

    def regex = Pattern.compile("\"csrf-token\" content=\"([^\"]+)\"")
    def csrfToken = regex.matcher(finalLoginResp.body())
    if (csrfToken.find()) {
      envs.put("SWO_XSR_TOKEN", csrfToken.group(1))
    }

    envs.put("SWO_COOKIE", cookieStore.getCookies().join(";"))
    return envs

  } catch (Exception exception) {
    System.out.println("Error -> ${exception}")
    return envs
  }
}

test {
  String cloud = "NONE"
  if (aws()) {
    cloud = "AWS"
  }
  if (azure()) {
    cloud = "AZURE"
  }

  useJUnitPlatform()
  testLogging {
    events("passed", "skipped", "failed")
  }

  setSystemProperties(["test.cloud": cloud])
  setEnvironment(addAuth(getEnvironment()))
}
