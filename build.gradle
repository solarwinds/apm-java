/*
 * Â© SolarWinds Worldwide, LLC. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

group = "com.solarwinds"

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            name = "sonatype"
            url = uri("https://oss.sonatype.org/content/repositories/snapshots")
        }
    }
    dependencies {
        classpath "com.diffplug.spotless:spotless-plugin-gradle:6.14.0"
        classpath "com.github.johnrengelman:shadow:8.1.1"
        classpath "io.opentelemetry.instrumentation:gradle-plugins:2.3.0-alpha"
    }
}

subprojects {
  apply plugin: "java"
  apply plugin: "checkstyle"
  apply plugin: "com.diffplug.spotless"

    ext {
        versions = [
                opentelemetry         : "1.37.0",
                opentelemetryJavaagent: "2.3.0",
                bytebuddy             : "1.12.10",
                guava                 : "30.1-jre",
                joboe                 : "10.0.4",
                agent                 : "2.3.1", // the custom distro agent version
                autoservice           : "1.0.1",
                caffeine              : "2.9.3",
        ]
        versions.opentelemetryAlpha = "${versions.opentelemetry}-alpha"
        versions.opentelemetrySemconv = "1.21.0-alpha"
        versions.opentelemetryJavaagentAlpha = "${versions.opentelemetryJavaagent}-alpha"

        deps = [
                bytebuddy  : "net.bytebuddy:byte-buddy-dep:${versions.bytebuddy}",
                autoservice: [
                        "com.google.auto.service:auto-service:${versions.autoservice}",
                        "com.google.auto.service:auto-service-annotations:${versions.autoservice}",
                ],
        ]
    }

    repositories {
        maven {
            url = uri("https://oss.sonatype.org/content/repositories/snapshots")
        }
        maven {
            url = uri("https://maven.pkg.github.com/solarwinds-cloud/maven-releases")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
            }
        }
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        testImplementation project(path: ":bootstrap")
        testImplementation 'org.mockito:mockito-core:5.3.0'
        testImplementation 'org.mockito:mockito-junit-jupiter:5.3.0'
        testImplementation 'javax.annotation:javax.annotation-api:1.3.2'

        testImplementation 'org.mockito:mockito-inline:5.2.0'
        testImplementation("org.junit.jupiter:junit-jupiter-api:5.9.2")
        testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.9.2")

        testImplementation("io.opentelemetry:opentelemetry-sdk-extension-autoconfigure:${versions.opentelemetry}")
        testImplementation("io.opentelemetry.javaagent:opentelemetry-javaagent-extension-api:${versions.opentelemetryJavaagentAlpha}")
        testImplementation("io.opentelemetry.javaagent:opentelemetry-javaagent-tooling:${versions.opentelemetryJavaagentAlpha}")

        testImplementation("io.opentelemetry.instrumentation:opentelemetry-instrumentation-api:${versions.opentelemetryJavaagent}")
        testImplementation("io.opentelemetry.semconv:opentelemetry-semconv:${versions.opentelemetrySemconv}")
        testImplementation("io.opentelemetry:opentelemetry-sdk-testing:${versions.opentelemetry}")

        testImplementation "com.solarwinds.joboe:core:${versions.joboe}"
        testImplementation "com.solarwinds.joboe:metrics:${versions.joboe}"
        testImplementation 'org.junit-pioneer:junit-pioneer:2.1.0'

    }

    checkstyleMain {
        configFile = file("$rootDir/checkstyle.xml")
    }

    checkstyleTest.enabled = false

    checkstyleTest {
        configFile = file("$rootDir/checkstyle.xml")
    }

    test {
        useJUnitPlatform()
    }

    javadoc {
        source = sourceSets.main.allJava
    }

  spotless {
    format "misc", {
      target ".gitattributes", ".gitignore"
      trimTrailingWhitespace()
      endWithNewline()
    }

    java {
      target "src/*/java/**/*.java"
      removeUnusedImports()
      googleJavaFormat()
      formatAnnotations()
    }
  }
  java {
    disableAutoTargetJvm()
  }
}
